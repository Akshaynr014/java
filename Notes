Java Versions and Their Feature
🔹 Java 1.0 (1996)
First official version

Basic OOP concepts: Classes, Objects, Inheritance, etc.

Applets introduced

🔹 Java 1.2 (1998) – “Java 2”
Swing GUI

Collections Framework (List, Set, Map, etc.)

JIT Compiler

🔹 Java 1.5 (2004) – “Java 5”
Generics

Enhanced for loop (for-each)

Autoboxing/unboxing

Annotations

Enums

Varargs

🔹 Java 1.6 (2006) – “Java 6”
Improved Web Services support

Compiler API

Performance enhancements

🔹 Java 1.7 (2011) – “Java 7”
Try-with-resources

Diamond Operator (<>)

Multi-catch exception

Strings in switch

🔹 Java 1.8 (2014) – “Java 8”
Lambda Expressions

Stream API

Functional Interfaces

Default & Static methods in interfaces

java.time API (new Date-Time API)

Optional class

🔹 Java 9 (2017)
Modules (JPMS)

jshell (REPL)

Improved Stream API

🔹 Java 10 (2018)
Local-variable type inference (var)

Performance improvements

🔹 Java 11 (2018) – LTS
HTTP Client API

Run Java files without compiling

Removed deprecated APIs

🔹 Java 12 to 15 (2019–2020)
Switch expressions (preview in 12, finalized in 14)

Text blocks (multi-line strings)

Helpful NullPointerException messages

🔹 Java 16–17 (2021) – LTS
Pattern Matching for instanceof

Sealed Classes

Records (data-only classes)

🔹 Java 18–20 (2022–2023)
Structured concurrency (preview)

Switch enhancements

Record patterns (preview)

🔹 Java 21 (2023) – LTS
Virtual threads (from Project Loom)

Finalized pattern matching for switch

Record patterns, sequenced collections

🔹 Java 22 (2024)
Latest preview features like unnamed variables and classes

Improvements to pattern matching and threads

Shortcuts of Ecipse:

Ctrl + Shift + R – Open resource (any file)

Ctrl + Shift + T – Open type (class/interface)

F3 – Go to declaration

Ctrl + O – Quick outline (methods in current class)

Ctrl + E – Switch between open editors

Alt + ← / → – Navigate backward/forward in history


Ctrl + Space – Content assist / autocomplete

Ctrl + Shift + F – Format code

Alt + Shift + R – Rename variable/method/class

Ctrl + D – Delete current line

Ctrl + / – Toggle single-line comment

Ctrl + Shift + / – Add block comment

Ctrl + Shift + \ – Remove block comment




oops Concept
 1. Class
A class is a blueprint or template used to create objects. It defines properties (variables) and behaviors (methods) that the object will have.
 2. Object
An object is an instance of a class. It represents a real-world entity and has a state (data) and behavior (functions).
 3. Encapsulation
Encapsulation is the process of wrapping data and methods into a single unit. It helps to protect the data from unauthorized access by using access modifiers like private, public, etc.
 4. Inheritance
Inheritance is the process by which one class acquires the properties and behaviors of another class. It promotes code reusability and establishes a relationship between classes.
 5. Polymorphism
Polymorphism means "many forms." It allows one interface to be used for different data types or methods to perform different tasks based on the object or input.
 6. Abstraction
Abstraction is the process of hiding the internal details and showing only the essential features. It helps in reducing complexity and improving code readability.
 7. Interface
An interface is a collection of abstract methods that define a contract for what a class can do, without specifying how it should do it. It is used to achieve abstraction and multiple inheritance.

Useful FileHandling Methods

createNewFile()	Creates a new file
exists()	Checks if the file exists
getName()	Returns the name of the file
getAbsolutePath()	Returns absolute path of the file
canRead()	Checks if file is readable
canWrite()	Checks if file is writable
length()	Returns file size in bytes
delete()	Deletes the file


 Java Collections Framework – Notes 

🔹 1. What is the Java Collections Framework (JCF)?
The Java Collections Framework is a unified architecture for storing and manipulating groups of objects. It includes:

Interfaces

Classes

Algorithms

👉 Collections help in handling data structures like lists, sets, queues, and maps.

🔹 2. Key Interfaces in Collections
Interface	Description
Collection	Root interface for all collections
List	Ordered collection (can have duplicates)
Set	Unordered collection (no duplicates)
Queue	Ordered for processing elements (FIFO)
Map	Key-value pairs (no duplicate keys)

🔹 3. List Interface
Definition: An ordered collection that allows duplicate elements.

Explanation: Maintains insertion order. You can access elements using an index.

🔹 4. Set Interface
Definition: A collection that does not allow duplicate elements.

Explanation: It models the mathematical set abstraction.

🔹 5. Queue Interface
Definition: A collection used to hold multiple elements prior to processing.

Explanation: Usually follows FIFO (First In, First Out) order.

🔹 6. Map Interface
Definition: An object that maps keys to values.

Explanation: Each key is unique, but values can be duplicated. Not a true Collection.

🔹 7. Common Implementations
Interface	Class	Description
List	ArrayList	Resizable array, fast access
LinkedList	Doubly linked list, faster insert/delete
Set	HashSet	Unordered set, allows null, no duplicates
LinkedHashSet	Maintains insertion order
TreeSet	Sorted set, no nulls
Queue	PriorityQueue	Orders elements using comparator
Map	HashMap	Unordered key-value pairs
LinkedHashMap	Maintains insertion order
TreeMap	Sorted key-value pairs

🔹 8. Iterator Interface
Definition: Used to traverse elements in a collection.

Explanation: Provides methods like hasNext() and next().

🔹 9. Comparable vs Comparator
Concept	Definition
Comparable	Natural ordering, defines compareTo() inside class
Comparator	Custom sorting logic, defines compare() externally

🔹 10. Differences Between List, Set, and Map
Feature	List	Set	Map
Duplicates	Allowed	Not allowed	Keys: No, Values: Yes
Order	Maintains	Not guaranteed	Keys sorted (TreeMap)
Index Access	Yes	No	No

🔹 11. Collections vs Collection
Collection: Interface (List, Set, Queue)

Collections: Utility class with static methods (like sort(), reverse())

🔹 12. Benefits of Collections Framework
Reduces programming effort


Increases performance and reusability

Provides consistent API

Supports various data structures

 Types of Cursors in Java

1. Enumeration Cursor
Introduced in: Java 1.0

Used with: Legacy classes like Vector, Stack, Hashtable

Methods:

hasMoreElements()

nextElement()

Traversal Direction: Forward only

Modification Allowed: ❌ No (read-only)

Special Note: Can't be used to add or remove elements

2. Iterator Cursor
Introduced in: Java 1.2

Used with: All collection classes (List, Set, Queue, etc.)

Methods:

hasNext()

next()

remove() – ✅ Safe removal during iteration

Traversal Direction: Forward only

Modification Allowed: ✅ Remove only

Special Note: Universal cursor for collections

3. ListIterator Cursor
Introduced in: Java 1.2

Used with: Only List implementations (ArrayList, LinkedList)

Methods:

All Iterator methods (hasNext(), next(), remove())

Plus: hasPrevious(), previous(), add(), set()

Traversal Direction: ✅ Forward and backward

Modification Allowed: ✅ Add, remove, update

Special Note: Most powerful cursor, but works only with Lists


Primitive vs Wrapper Class Table
Primitive Type	Wrapper Class
byte	Byte
short	Short
int	Integer
long	Long
float	Float
double	Double
char	Character
boolean	Boolean

-----------------------------------------------2/7/2025---------------------------------------------

 Map Interface (Java 1.2)
Map is not a child of the Collection interface.

It is a separate interface in the Java Collections Framework.

Stores data in key-value pairs (each entry is a Map.Entry<K, V> object).

Keys must be unique.

Values can be duplicated.

Only one null key is allowed (in HashMap), but multiple null values are allowed.

Use .put(key, value) to add entries.

All methods in the Map interface are abstract.

Hashtable, HashMap, LinkedHashMap, TreeMap are major implementations.

✅ How HashMap Works Internally
Hashing the key:

The key is passed through a hashing function (hashCode() method).

Hashing converts the key to an integer hash.

Calculate index:

index = hashCode % arraySize

Default arraySize in Java 8+ is 16 (can grow dynamically).

The index points to a bucket (a slot in the internal array).

Store entry in the bucket:

If the bucket is empty, the entry is stored.

If not, a collision is handled using a LinkedList or Balanced Tree.

Hash collision:

Occurs when two different keys have the same hash index.

Java handles this using:

Linked List (Java 7 and earlier)

Balanced Tree / Red-Black Tree (Java 8+, when number of items > 8 in a bucket and array size ≥ 64)

Retrieving (hashMap.get(key)):

Hash the key → find index → search the bucket’s list/tree for the matching key → return value.

✅ HashMap Constructors
java
Copy
Edit
HashMap();                              // default capacity 16
HashMap(int initialCapacity);          // user-defined capacity
HashMap(int initialCapacity, float loadFactor);  // capacity + threshold
HashMap(Map<? extends K, ? extends V> m);         // copy from another map
✅ LinkedHashMap
Extends HashMap.

Maintains insertion order using a doubly linked list internally.

✅ SortedMap (Java 1.2)
It is a child interface of Map.

TreeMap is a concrete implementation.

Maintains natural order (or custom using Comparator).

✅ Entry Set Example Using Map
java
Copy
Edit
import java.util.*;

public class EntrySetExample {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("Apple", 10);
        map.put("Banana", 20);
        map.put("Mango", 15);

        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println(entry.getKey() + " => " + entry.getValue());
        }
    }
}
✅ Lambda Expression in Java
Introduced in Java 8, lambda expressions simplify code by reducing boilerplate.

🔹 Syntax
java
Copy
Edit
(parameters) -> { body }
🔹 Rules
Can omit access modifiers, return type, and method name.

For a single statement, {} and return are optional.

🔹 Examples
java
Copy
Edit
// Example 1: No parameters
Runnable r = () -> System.out.println("Running");

// Example 2: Single parameter
Consumer<String> c = str -> System.out.println(str);

// Example 3: Multiple parameters
BiFunction<Integer, Integer, Integer> add = (a, b) -> a + b;

// Example 4: With return
Function<String, Integer> strLength = str -> str.length();


 Day 9--------------------------------------------------------------------------------------------
🗓 Date: 3/7/2025

🧠 Topic: Multitasking & Multithreading

🔄 Multitasking
1. Process-Based Multitasking
Multiple programs run simultaneously.

Example: OS running multiple applications like browser, music player, etc.

2. Thread-Based Multitasking
Multiple threads (independent parts) of the same program run simultaneously.

More efficient than process-based multitasking.

🧵 Multithreading in Java
Multithreading allows multiple threads to run in parallel, sharing the same memory space.

🔹 Two Ways to Create a Thread:
By Extending the Thread Class

class MyThread extends Thread {
    public void run() {
        // task code
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread t = new MyThread();
        t.start(); // starts the thread
    }
}
By Implementing the Runnable Interface


class MyRunnable implements Runnable {
    public void run() {
        // task code
    }
}

public class Main {
    public static void main(String[] args) {
        Thread t = new Thread(new MyRunnable());
        t.start();
    }
}
⏱ Thread Scheduler
Part of JVM that decides which thread to run next.

Behavior may vary depending on OS and JVM.

🛠 start() vs run() Method
Method	Description
start()	Registers the thread with the Thread Scheduler and calls run() internally.
run()	Treated as a normal method if called directly (not as a thread). No new thread is created.

⚠️ You cannot restart a thread once it has been started and completed.

🎚 Thread Priorities
Range: 1 to 10

Thread.MIN_PRIORITY = 1

Thread.NORM_PRIORITY = 5 (default)

Thread.MAX_PRIORITY = 10

🧵 Main Thread vs Child Thread
The main thread is the entry point of the Java program.

Additional threads created using Thread or Runnable are called child threads.

🔁 Thread Life Cycle
📌 States of a Thread:

NEW --> RUNNABLE --> RUNNING --> TERMINATED
          |            |            ^
          v            v            |
      BLOCKED    WAITING     TIMED_WAITING
🔹 Description:
State	Description
NEW	Thread object is created, but not yet started.
RUNNABLE	start() is called, thread is ready to run.
RUNNING	CPU has selected the thread to run.
BLOCKED	Thread is blocked, waiting to acquire a lock.
WAITING	Thread waits indefinitely for another thread to perform a task.
TIMED_WAITING	Thread waits for a specific period of time.
TERMINATED	Thread completes execution or is stopped.

Java Runnable Interface – Notes (Without Code)
🔹 What is Runnable?
Runnable is a functional interface in Java (from java.lang package).

It is used to define a task that can be executed by a thread.

It contains only one method: run().

🔹 Why use Runnable?
To create threads without extending the Thread class.

Allows your class to extend another class (since Java supports only single inheritance).

Helps to separate task logic from thread execution.

🔹 How Runnable works:
You define a task by implementing the Runnable interface.

This task is then passed to a Thread object.

The thread is started to execute the task in parallel.

🔹 Key Benefits:
Better flexibility than using Thread directly.

Encourages code reuse and separation of concerns.

Compatible with lambda expressions in Java 8 and above.

🔹 Runnable vs Thread
Feature	Runnable	Thread
Inheritance	Implements interface	Extends Thread class
Flexibility	More (can extend other classes)	Less (single inheritance)
Use case	Defines task logic	Handles thread execution & task
Reusability	Can reuse same Runnable object	Less reusable

🔹 Notes:
You must call the start() method on a Thread object to run a Runnable task.

Directly calling run() does not start a new thread — it just runs in the current thread.

Useful in applications where you want to run multiple tasks in parallel.

 What is a Thread?
A thread is the smallest unit of execution in a program.

Java supports multithreading, allowing multiple threads to run concurrently.

🔹 Benefits of Multithreading
Efficient use of CPU resources.

Enables parallelism (e.g., playing music while downloading files).

Improves application performance and responsiveness.

🔹 Thread Lifecycle
New – Thread is created.

Runnable – Thread is ready to run.

Running – Thread is currently executing.

Blocked/Waiting – Thread is paused for a reason (e.g., waiting for a resource).

Terminated – Thread has finished execution.

🔹 Ways to Create Threads
Extending Thread class

Implementing Runnable interface

Using Callable with ExecutorService (for tasks that return results)

🔹 Important Thread Methods
start() – Starts thread execution.

run() – Contains the thread’s task.

sleep(ms) – Pauses thread for given milliseconds.

join() – Waits for another thread to finish.

interrupt() – Interrupts a sleeping or waiting thread.

🔹 Thread Priorities
Threads can be given priority (1 to 10).

Thread.MIN_PRIORITY, NORM_PRIORITY, and MAX_PRIORITY.

🔹 Thread Safety
Ensure correct behavior in concurrent access to shared resources.

Use synchronized blocks/methods, locks, or concurrent classes.
-----------------------------------------------------------------------------------------------------
 yield()
A method from the Thread class.

Hints the thread scheduler to pause the current thread and give a chance to other threads of the same or higher priority.

Does not guarantee the thread will pause.

🔹 sleep()
Also from the Thread class.

Pauses the execution of the current thread for a specified time.

The thread goes into a timed waiting state.

Requires handling an InterruptedException.

🔹 wait()
A method from the Object class.

Causes the current thread to wait until another thread calls notify() or notifyAll() on the same object.

Used for inter-thread communication.

Must be called from within a synchronized block.

🔹 notify()
Wakes up one waiting thread that is waiting on the object.

The thread will continue only after the current thread releases the lock.

Must be called inside a synchronized block.

🔹 notifyAll()
Wakes up all threads waiting on the object.

Only one thread gets the lock and continues execution.

Also must be called within a synchronized block.

🔹 Daemon Thread
A background thread that supports user threads (e.g., garbage collector).

It runs in the background and ends when all user (non-daemon) threads finish.

Must be marked as a daemon before starting the thread.
--------------------------------------------------------------------------------------------------
JDBC Connectivity Notes
🔸 What is JDBC?
JDBC (Java Database Connectivity) is an API in Java that allows Java programs to connect and interact with relational databases like MySQL, PostgreSQL, Oracle, etc.

🔸 Steps in JDBC Connectivity
1. Import JDBC Packages

import java.sql.*;
2. Load and Register the Driver
For example, for PostgreSQL:

Class.forName("org.postgresql.Driver");
For MySQL: "com.mysql.cj.jdbc.Driver"

3. Establish the Connection

Connection con = DriverManager.getConnection(
    "jdbc:postgresql://localhost:5432/your_database",
    "your_username",
    "your_password"
);
4. Create a Statement / PreparedStatement

Statement stmt = con.createStatement();
// OR
PreparedStatement pstmt = con.prepareStatement("INSERT INTO table_name VALUES (?, ?)");
5. Execute the Query

// For SELECT
ResultSet rs = stmt.executeQuery("SELECT * FROM table_name");

// For INSERT/UPDATE/DELETE
int rowsAffected = stmt.executeUpdate("UPDATE table_name SET column='value' WHERE condition");
6. Process the Results

while(rs.next()) {
    System.out.println(rs.getString("column_name"));
}
7. Close the Resources

rs.close();
stmt.close();
con.close();
🔸 Common JDBC Interfaces
Interface	Description
DriverManager	Manages the list of database drivers.
Connection	Represents the connection to the DB.
Statement	Used to execute static SQL queries.
PreparedStatement	Used for parameterized queries.
ResultSet	Stores the result returned by SELECT.

🔸 Example Code: SELECT Query (PostgreSQL)

import java.sql.*;

public class JdbcExample {
    public static void main(String[] args) {
        try {
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/mydb", "postgres", "password");

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM users");

            while(rs.next()) {
                System.out.println("ID: " + rs.getInt("id") + ", Name: " + rs.getString("name"));
            }

            rs.close();
            stmt.close();
            con.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
}
🔸 Useful Tips
Use PreparedStatement instead of Statement to avoid SQL injection.

Always close connections in the finally block or use try-with-resources.

Use proper exception handling (SQLException, ClassNotFoundException).
------------------------------------------------------------------------------------------------------
 JDBC Core Concepts Notes
🔹 1. DriverManager.getConnection() - Overloaded Methods
The DriverManager class provides three overloaded methods to establish a database connection:

Method 1: Takes only the database URL.

Method 2: Takes the database URL along with a username and password.

Method 3: Takes the database URL and a Properties object (which contains username, password, and other optional settings).

🔹 2. Types of SQL Queries
Select Query

Used to retrieve data from the database.

Returns a ResultSet object.

Other Queries (Insert, Update, Delete)

Used to modify data.

Return an integer value representing the number of rows affected.

🔹 3. Static vs. Dynamic Queries
Static Query

The query is hard-coded with values directly in the SQL string.

Example: WHERE id = 1

Executed using the Statement interface.

Dynamic Query

The query uses placeholders (?) for values, which are set at runtime.

Example: WHERE id = ?

Executed using the PreparedStatement interface.

🔹 4. Statement Interfaces
To send SQL queries to the database, we use:

Statement

Used for static queries.

Not secure against SQL injection.

PreparedStatement

Used for dynamic queries.

More secure and faster for repeated executions.

Prevents SQL injection by setting values using methods like setInt, setString, etc.

🔹 5. Query Execution Methods
Once a Statement or PreparedStatement is created from a Connection, queries are executed using:

executeQuery()

Used for SELECT statements.

Returns a ResultSet containing the data.

executeUpdate()

Used for INSERT, UPDATE, or DELETE statements.

Returns an int representing how many rows were affected.

🔹 6. Properties File (For Database Configurations)
A .properties file can be used to store database connection details such as:

URL

Username

Password

This improves security and makes the application easier to maintain by avoiding hard-coded credentials in Java files.

---------------------------------------------------------------------------------------------------------
Collections
In-memory storage: Collections (like List, Set, Map) store data in memory (RAM) during program execution.

Temporary data: Data is lost once the program stops.

Faster operations: Access and modification of data are generally fast because they happen in memory.

No persistence: Cannot permanently store data; used mainly for data manipulation during runtime.

Used when: You need to manage data temporarily within the application.

JDBC (Java Database Connectivity)
Persistent storage: JDBC allows Java programs to connect with a database (like MySQL, PostgreSQL) to store data permanently.

Database interaction: Performs CRUD operations (Create, Read, Update, Delete) on database tables.

Slower than memory: Slightly slower due to network and disk access, but ensures data persistence.

Data is saved: Data remains in the database even after the program ends.

Used when: You need to store, retrieve, or manipulate data permanently.

-----------------------------------------------------------------------------------------------------

1. Creating a Maven Project
Use Maven Archetype Quickstart to create a basic Java project.

Set artifactId as the project name.

Command (if using terminal):

mvn archetype:generate -DgroupId=com.example -DartifactId=myproject -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
✅ 2. Adding MySQL Connector Dependency
Visit: https://mvnrepository.com

Search: MySQL Connector

Choose the latest (8.x) version.

Copy the <dependency> tag and paste it inside pom.xml to download the JAR.

✅ 3. Updating Java Version in Maven
In pom.xml, update plugin to use Java 21:

<properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
</properties>
✅ 4. Web Resources
There are two types:

1. Static Web Resources
Content does not change.

Examples: HTML, CSS, JS, images

Same response for every request.

2. Dynamic Web Resources
Content is generated based on user input or server logic.

Examples: Servlet, JSP

Different response for different users or actions.

✅ 5. Static Web Application
Built using only static resources (HTML, CSS).

No server-side logic.

Example: Portfolio site

✅ 6. Dynamic Web Application
Uses Servlets, JSP, or JPA.

Content changes dynamically based on request.

Example: Login page, shopping cart.

✅ 7. Web Browser ↔ Web Server
Web browser sends request (like Chrome).

Web server (like Tomcat) handles request and sends back response.

Web Application runs inside the server (Java-based logic).

✅ 8. Tomcat Server
An open-source Java web server and Servlet container.

Used to run Java web applications (WAR files).

Default port: 8080

✅ 9. 3 Ways to Access Web Applications
Browsing – Typing the URL directly

Clicking hyperlinks – Navigating through links

Submitting forms – Sending user data to the server

✅ 10. Creating a Maven Web Project
Use Maven archetype for web apps:

mvn archetype:generate -DgroupId=com.example -DartifactId=mywebapp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
Creates structure for a web application (web.xml, index.jsp in webapp/)

------------------------------------------------------------------------------------------------------
 What is a Servlet?
A Servlet is a Java class that handles HTTP requests and responses in a web application. It runs on the server side inside a Servlet container (like Apache Tomcat).

Think of a servlet as a Java program that responds to requests from a browser (e.g., /login, /register).

🔹 Why Use Servlets?
To create dynamic web content.

To handle form submissions, process logic, and generate responses (like HTML).

It's the foundation of modern web frameworks (like Spring MVC).

🔹 Servlet Life Cycle
The Servlet life cycle is managed by the Servlet container (e.g., Tomcat).

Loading: Servlet class is loaded.

Instantiation: An object is created.

Initialization: init() method is called once.

Request Handling:

service() method is called for every request.

Usually overridden as doGet() or doPost() based on request type.

Destruction: destroy() method is called when the servlet is taken out of service.

🔹 Key Servlet Methods
Method	Purpose
init()	Called once when the servlet is first created.
doGet()	Handles GET requests (e.g., typing a URL).
doPost()	Handles POST requests (e.g., submitting a form).
destroy()	Called once before the servlet is destroyed.
service()	Called by the container to handle requests. Usually overridden by doGet()/doPost().
-------------------------------------------------------------------------------------------------------
Servlets in J2EE
Servlets are part of the Java EE API.

They handle requests from web browsers via a web server.

Mainly used to create dynamic web applications.

📦 WAR File (Web Application Archive)
A WAR file packages all components of a Java web application:

Servlets

JSPs

HTML, CSS, JavaScript

Libraries (JARs)

It is deployed to a Java EE-compatible web server or application server (e.g., Tomcat, JBoss, GlassFish).

WAR file is placed inside the webapps/ folder of the Tomcat server for deployment.

🚀 Deploying a WAR File in Tomcat
Copy the .war file into the webapps/ directory of Tomcat.

Tomcat automatically detects and deploys it.

Access the application using a web URL in a browser.

🌐 Web URL Structure
bash
Copy
Edit
protocol://domain:port/path?queryString#fragmentID
Protocol: Communication standard (e.g., http, https)

Domain: Unique name identifying a computer/server on the network

Port: Identifies the specific web server application

Path: Combines web application name and web resource location

Query String: Key-value pair used to send data to dynamic resources like servlets/JSPs

Fragment ID: Refers to a specific section of a web page

🔐 Protocols Used in Web Communication
HTTP (HyperText Transfer Protocol)

Default port: 8080

Used for regular web communication

HTTPS (Secure HTTP)

Default port: 8443

Encrypts communication for secure data transfer

📥 Key Elements of Request and Response
HTTP Request
Web URL

Form data (from input fields)

HTTP methods

Cookies (optional)

HTTP Response
Status code (e.g., 200, 404, 500)

Actual content (HTML, JSON, etc.)

Cookies

📡 Common HTTP Methods
GET – Retrieves data from server

POST – Sends data to server

PUT – Updates existing resource

DELETE – Removes resource

HEAD – Similar to GET, but without body

OPTIONS – Returns allowed methods

TRACE – Used for debugging

CONNECT – Establishes a tunnel for SSL communication

🔔 Note: HTTP methods should always be written in UPPERCASE.

✅ HTTP Status Codes
200 – OK (request handled successfully)

404 – Not Found (resource does not exist)

500 – Internal Server Error (server-side issue)

---------------------------------------------------------------------------------------------------
 Servlet Life Cycle
Instantiation

Servlet object is created by the container.

Initialization (init())

Called once after instantiation.

Initializes servlet with config info.

Service (service())

Called for each client request.

Handles GET, POST, etc.

Destroy (destroy())

Called once before servlet is removed.

Used for cleanup (e.g., closing connections).

🌐 Web Handling in Servlet
@WebServlet("/")
Used to map a servlet directly using annotation (alternative to web.xml).

🍪 Cookies and Sessions
1. Cookies
Stored on client browser.

Key-value pairs.

Used for storing small data like username, last visit.

2. Session
Stored on server.

HttpSession object tracks user session.

More secure than cookies.

🔀 Request Dispatching
1. Forward
Internal transfer to another resource.

URL doesn't change.

request.getRequestDispatcher("target.jsp").forward(request, response);

2. Redirect
Client is redirected to a new URL.

URL changes.

response.sendRedirect("target.jsp");

🧪 Assessment Use Case – Employee Management
🏠 Home Page
Options:

Add Employee

Search by ID

Delete by ID

Update

List All Employees

➕ Add Employee Flow
Click Add Employee → Redirects to addEmployee.jsp.

Submit form → Servlet handles request.

Data is saved to Database (using JDBC or JPA).

📝 JSP (Java Server Pages)
If using a .jsp file, map it in web.xml instead of a servlet class.

📌 Types of JSP Tags
Type	Syntax	Description
Expression	<%= expression %>	Outputs result directly into HTML
Scriptlet	<% Java code %>	Embed Java code inside JSP
Directive	<%@ directive attribute="value" %>	Page-level instructions (e.g., imports)
Declaration	<%! Java method or variable declaration %>	Declares class-level variables or methods
Action	<jsp:action ... />	XML-based tags (e.g., include, forward)

🧱 Frameworks Overview
🔹 What is a Framework?
An abstract layer that simplifies and structures application development.

🔹 Examples:
JDBC → Low-level DB access

Hibernate → ORM framework built over JDBC

Spring → Full-stack framework for building enterprise apps

🛠️ JPA with Hibernate
❌ Drawbacks of JDBC
Manual query writing.

No object mapping (have to convert text to object).

No database relationship mapping support.

✅ Why ORM (Hibernate)?
Acts as a bridge between Java and DB.

Supports object-relational mapping (ORM).

Automatically maps Java objects to DB tables.

🔄 JPA with Hibernate
JPA (Java Persistence API): Specification that defines ORM rules.

Hibernate: Implementation of JPA.

🧩 Key Features:
Bi-directional mapping.

Entity relationships (One-to-One, One-to-Many, etc.).

Uses annotations like @Entity, @Id, @OneToMany, etc.

🧍‍♂️ Employee Example – Mapping Structure
📦 Entities:
EmployeeInfo (Primary Entity)

PrimaryInfo (One-to-One with Employee)

SecondaryInfo (One-to-One or optional)

EmployeeAddress (One-to-Many – One employee can have many addresses)

🔑 Primary Key:
Employee ID (used as primary key in EmployeeInfo)

Used to map related entities using annotations:

java
Copy
Edit
@OneToMany(mappedBy="employee")
private List<EmployeeAddress> addresses;
---------------------------------------------------------------------------------------------------------------------------------------------------------
 What is JPA (Java Persistence API)?
A Java specification for object-relational mapping (ORM).

Used to map Java objects to database tables.

It’s only an interface/specification—requires a provider (implementation) like Hibernate.

🔧 What is Hibernate?
A popular implementation of JPA.

Handles all low-level JDBC operations internally.

Provides additional features beyond JPA.

🧱 Core JPA Concepts (Basics)
1. Entity
A Java class that represents a database table.

Annotated with @Entity and mapped to a table.

2. Primary Key
Every entity must have a primary key.

Use @Id annotation to mark it.

Use @GeneratedValue for auto-incrementing keys.

3. Persistence Unit
Defined in persistence.xml file.

Contains configuration like:

Database URL

Dialect

JDBC driver

Entity class names

Provider (e.g., org.hibernate.jpa.HibernatePersistenceProvider)

4. EntityManager
Main interface for interacting with the persistence context.

Responsible for CRUD operations, transactions, and queries.

5. EntityManagerFactory
Used to create EntityManager instances.

Created only once per application.

6. Persistence Context
A memory area where managed entities are stored.

Ensures entity uniqueness within a transaction.

🛠️ JPA Operations (CRUD)
- Create → persist(entity)
- Read → find(), getReference()
- Update → merge(entity)
- Delete → remove(entity)
📦 JPA Lifecycle States
New/Transient → Object not in DB or context

Managed → Object tracked by EntityManager

Detached → No longer managed

Removed → Marked for deletion

🗃️ JPQL (Java Persistence Query Language)
Object-oriented query language.

Similar to SQL but works with entities and fields, not tables and columns.

Examples: SELECT e FROM Employee e WHERE e.name = 'Akshay'

🔄 Transactions
Required for making changes in DB.

Use EntityTransaction to begin, commit, and rollback.
------------------------------------------------------------------------------------------------------------------------
JPA & Hibernate Associations
Associations define relationships between entities (tables). JPA and Hibernate use annotations to map these relationships.

1. One-to-One
Definition: Each entity instance is associated with only one instance of another entity.

Example: A User has one Profile.

Mapped Using: @OneToOne

Cascade & Fetching: Often used with cascade and fetch types.

2. One-to-Many
Definition: One entity is associated with multiple instances of another entity.

Example: A Department has many Employees.

Mapped Using: @OneToMany (with mappedBy in the owning entity)

3. Many-to-One
Definition: Many instances of one entity are associated with one instance of another.

Example: Many Employees belong to one Department.

Mapped Using: @ManyToOne

4. Many-to-Many
Definition: Multiple instances of one entity are associated with multiple instances of another.

Example: A Student can enroll in many Courses, and a Course can have many Students.

Mapped Using: @ManyToMany

Join Table: Requires a separate join table to manage relationships.

🔄 Cascade Types
Control how operations (like persist, merge, remove) are cascaded to related entities.
Common types:

PERSIST

MERGE

REMOVE

ALL

⚡ Fetch Types
Define when related entities are loaded:

LAZY: Loaded only when accessed.

EAGER: Loaded immediately with the parent.
-------------------------------------------------------------------------------------------------------------------------------------------------
Inversion of Control (IoC) in Spring
IoC is a design principle where the control of object creation and wiring is given to the Spring container.

In Spring, IoC is implemented using Dependency Injection (DI).

🔄 What does “IoC Container manages objects” mean?
The container is responsible for:

Instantiating the object (creating the bean)

Configuring the object (setting values, injecting dependencies)

Assembling the object (wiring dependencies together)

⚙️ Ways to Configure the IoC Container
XML-based Configuration

Annotation-based Configuration

Java-based Configuration Class

🧠 Types of IoC Containers in Spring
BeanFactory

Lightweight

Loads beans lazily

Basic container

ApplicationContext

More powerful and feature-rich

Loads beans eagerly

Preferred in most Spring applications

🤝 Dependency Injection (DI)
IoC is also known as Dependency Injection — where objects get their dependencies injected rather than creating them manually.

🔌 Types of Dependency Injection in Spring
Constructor Injection

Setter Injection

Factory Method Injection (arguments passed to factory methods)

📦 Java Bean in Spring
A class is considered a valid Java Bean if it:

Is a concrete class (not abstract/interface)

Has private data members

Provides public getters and setters

Does not contain business logic

Implements Serializable (optional but common)

🧠 Spring Beans
Beans are objects managed by the Spring IoC container

These beans form the backbone of your application

📐 Bean Scopes in Spring
Scope	Description
singleton	One instance per Spring container (default)
prototype	A new instance each time it is requested
request	One bean per HTTP request (web only)
session	One bean per HTTP session (web only)
application	One bean per ServletContext

To set the scope in XML:
scope="prototype" inside the <bean> tag

🧩 Has-A Relationship in Spring
A Has-A relationship represents composition.

Example: A Car has-a Discount object.

In Spring, this is managed through Dependency Injection (Spring wires these objects together automatically).
